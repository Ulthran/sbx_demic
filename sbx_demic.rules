# -*- mode: Snakemake -*-

from sunbeamlib import samtools
import os
import sys

TARGET_DEMIC = [str(MAPPING_FP / "demic" / "DEMIC_OUT" / "all_PTR.txt")]
BINNED_DIR = str(ASSEMBLY_FP / "coassembly" / "max_bin")
CONTIGS_FASTA = BINNED_DIR + "/all_final_contigs.fa"


def get_demic_path() -> str:
    for fp in sys.path:
        if fp.split("/")[-1] == "sbx_demic":
            return fp
    raise Error(
        "Filepath for demic not found, are you sure it's installed under extensions/sbx_demic?"
    )


rule all_demic:
    input:
        TARGET_DEMIC,


rule maxbin:
    input:
        a=expand(
            str(ASSEMBLY_FP / "coassembly" / "{group}_final_contigs.fa"),
            group=list(
                set(
                    coassembly_groups(
                        Cfg["sbx_coassembly"]["group_file"], Samples.keys()
                    )[0]
                )
            ),
        ),
        b=rules.all_prep_paired.input,
    output:
        str(Cfg["all"]["output_fp"]) + CONTIGS_FASTA,
    params:
        basename=str(Cfg["all"]["output_fp"]),
        binned_dir=str(Cfg["all"]["output_fp"]) + BINNED_DIR,
        contigs_fasta=str(Cfg["all"]["output_fp"]) + CONTIGS_FASTA,
    conda:
        "demic_env.yml"
    shell:
        "find {params.basename}/qc/decontam -iname '*.fastq.gz' > {params.basename}/decontam_list && "
        "mkdir -p {params.binned_dir} && "
        "cp {params.basename}/assembly/coassembly/all_final_contigs.fa {output} && "
        "run_MaxBin.pl -thread 10 -contig {params.contigs_fasta} -out {params.binned_dir} -reads_list {params.basename}/decontam_list"


rule bowtie2_build:
    input:
        str(Cfg["all"]["output_fp"]) + CONTIGS_FASTA,
    params:
        basename=str(Cfg["all"]["output_fp"]) + CONTIGS_FASTA,
    threads: Cfg["sbx_demic"]["threads"]
    output:
        touch(str(Cfg["all"]["output_fp"]) + CONTIGS_FASTA + ".1.bt2"),
    conda:
        "demic_env.yml"
    shell:
        "bowtie2-build --threads {threads} {input} {params.basename}"


# Run bowtie2 with index
rule bowtie2:
    input:
        rules.bowtie2_build.output,
        reads=expand(
            str(QC_FP / "decontam" / "{sample}_{rp}.fastq.gz"),
            sample=Samples.keys(),
            rp=Pairs,
        ),
    output:
        str(MAPPING_FP / "demic" / "raw" / "{sample}.sam"),
    threads: Cfg["sbx_demic"]["threads"]
    params:
        db_basename=str(Cfg["all"]["output_fp"]) + CONTIGS_FASTA,
    conda:
        "demic_env.yml"
    shell:
        """
        bowtie2 -q -x {params.db_basename} \
        -1 {input.reads[0]} -2 {input.reads[1]} -p {threads} \
        -S {output}
        """


rule samtools_sort:
    input:
        str(MAPPING_FP / "demic" / "raw" / "{sample}.sam"),
    output:
        temp_files=temp(str(MAPPING_FP / "demic" / "sorted" / "{sample}.bam")),
        sorted_files=str(MAPPING_FP / "demic" / "sorted" / "{sample}.sam"),
    threads: Cfg["sbx_demic"]["threads"]
    conda:
        "demic_env.yml"
    log:
        str(MAPPING_FP / "demic" / "logs" / "samtools_{sample}.error"),
    shell:
        """
        echo "converting to bam, sorting, and converting back to sam"
        samtools view -@ {threads} -bS {input} | samtools sort -@ {threads} - -o {output.temp_files} 2> {log}
        samtools view -@ {threads} -h {output.temp_files} > {output.sorted_files} 2>> {log}
        """


# TODO
# how to get the directory of this output:
#        str(MAPPING_FP/'demic'/'sorted'/'{sample}.sam')
# and how to get the directory of:
#       CONTIGS_FASTA
# because those are the inputs of the next rule
#
# Maybe this will work:
#
# os.path.dirname


rule run_demic:
    input:
        expand(
            str(MAPPING_FP / "demic" / "sorted" / "{sample}.sam"),
            sample=Samples.keys(),
        ),
    output:
        str(MAPPING_FP / "demic" / "DEMIC_OUT" / "all_PTR.txt"),
    params:
        r_installer=get_demic_path() + "/envs/install.R",
        demic=get_demic_path() + "/vendor_demic_v1.0.2/DEMIC.pl",
        sam_dir=str(MAPPING_FP / "demic" / "sorted"),
        fasta_dir=str(Cfg["all"]["output_fp"]) + BINNED_DIR,
        keep_all=Cfg["sbx_demic"]["keepall"],
        extras=Cfg["sbx_demic"]["extras"],
    threads: Cfg["sbx_demic"]["threads"]
    conda:
        "demic_env.yml"
    log:
        str(MAPPING_FP / "demic" / "logs" / "demic.error"),
    # Rscript {params.r_installer} && \
    shell:
        """
        {params.demic} --output_all {params.keep_all} {params.extras} \
        --thread_num {threads} \
        -S {params.sam_dir} -F {params.fasta_dir} \
        -O $(dirname {output}) 2> {log}
        """
