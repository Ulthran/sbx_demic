# -*- mode: Snakemake -*-

from sunbeamlib import samtools
import os

TARGET_DEMIC = [
    str(MAPPING_FP/'demic'/'DEMIC_OUT'/'all_PTR.txt')
]

rule all_demic:
    input:
        TARGET_DEMIC

rule maxbin:
    input:
        a = expand(str(ASSEMBLY_FP/'coassembly'/'{group}_final_contigs.fa'),group=list(set(coassembly_groups(Cfg['sbx_coassembly']['group_file'],Samples.keys())[0]))),
        b = rules.all_prep_paired.input
    output:
        str(Cfg['all']['output_fp']) + str(Cfg['sbx_demic']['contigs_fasta'])
    params:
        basename = str(Cfg['all']['output_fp']),
        binned_dir = str(Cfg['all']['output_fp']) + str(Cfg['sbx_demic']['binned_dir']),
        contigs_fasta = str(Cfg['all']['output_fp']) + str(Cfg['sbx_demic']['contigs_fasta']),
    conda:
        "envs/maxbin_env.yml"
    shell:
        "find {params.basename}/qc/decontam -iname '*.fastq.gz' > {params.basename}/decontam_list && "
        "mkdir -p {params.binned_dir} && "
        "cp {params.basename}/assembly/coassembly/all_final_contigs.fa {output} && "
        "run_MaxBin.pl -thread 10 -contig {params.contigs_fasta} -out {params.binned_dir} -reads_list {params.basename}/decontam_list"

rule bowtie2_build:
    input:
        str(Cfg['all']['output_fp']) + str(Cfg['sbx_demic']['contigs_fasta'])
    params:
        basename = str(Cfg['all']['output_fp']) + str(Cfg['sbx_demic']['contigs_fasta'])
    threads:
        Cfg['sbx_demic']['threads']
    output:
        touch(str(Cfg['all']['output_fp']) + str(Cfg['sbx_demic']['contigs_fasta']) + '.done')
    conda:
        "envs/bowtie2_env.yml"
    shell:
        "bowtie2-build --threads {threads} {input} {params.basename}"

# Run bowtie2 with index
rule bowtie2:
    output:
        str(MAPPING_FP/'demic'/'raw'/'{sample}.sam')
    input:
        rules.bowtie2_build.output,
        reads = expand(
            str(QC_FP/'decontam'/'{sample}_{rp}.fastq.gz'),
            sample = Samples.keys(),
            rp = Pairs)
    threads:
        Cfg['sbx_demic']['threads']
    params:
        db_basename = str(Cfg['all']['output_fp']) + str(Cfg['sbx_demic']['contigs_fasta'])
    conda:
        "envs/bowtie2_env.yml"
    shell:
        """
        bowtie2 -q -x {params.db_basename} \
        -1 {input.reads[0]} -2 {input.reads[1]} -p {threads} \
        -S {output}
        """

rule samtools_sort:
    input:
        str(MAPPING_FP/'demic'/'raw'/'{sample}.sam')
    output:
        temp_files = temp(str(MAPPING_FP/'demic'/'sorted'/'{sample}.bam')),
        sorted_files = str(MAPPING_FP/'demic'/'sorted'/'{sample}.sam')
    threads:
        Cfg['sbx_demic']['threads']
    conda:
        "envs/samtools_env.yml"
    log:
        str(MAPPING_FP/'demic'/'logs'/'samtools_{sample}.error')
    shell:
        """
        echo "converting to bam, sorting, and converting back to sam"
        samtools view -@ {threads} -bS {input} | samtools sort -@ {threads} - -o {output.temp_files} 2> {log}
        samtools view -@ {threads} -h {output.temp_files} > {output.sorted_files} 2>> {log}
        """

# TODO
# how to get the directory of this output:
#        str(MAPPING_FP/'demic'/'sorted'/'{sample}.sam')
# and how to get the directory of:
#       str(Cfg['sbx_demic']['contigs_fasta'])
# because those are the inputs of the next rule
#
# Maybe this will work:
#
# os.path.dirname

rule run_demic:
    input:
        expand(str(MAPPING_FP/'demic'/'sorted'/'{sample}.sam'),
        sample = Samples.keys())
    output:
        str(MAPPING_FP/'demic'/'DEMIC_OUT'/'all_PTR.txt')
    params:
        demic = Cfg['sbx_demic']['demic'],
        sam_dir = str(MAPPING_FP/'demic'/'sorted'),
        fasta_dir = str(Cfg['all']['output_fp']) + str(Cfg['sbx_demic']['binned_dir']),
        keep_all = Cfg['sbx_demic']['keepall'],
        extras = Cfg['sbx_demic']['extras'],
    threads:
        Cfg['sbx_demic']['threads']
    conda:
        "envs/demic_env.yml"
    log:
        str(MAPPING_FP/'demic'/'logs'/'demic.error')
    shell:
        """
        {params.demic} --output_all {params.keep_all} {params.extras} \
        --thread_num {threads} \
        -S {params.sam_dir} -F {params.fasta_dir} \
        -O $(dirname {output}) 2> {log}
        """

